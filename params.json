{
  "name": "Fingerlock",
  "tagline": "Android fingerprint authentication library",
  "body": "#FingerLock\r\nFingerLock is a library designed to make fingerprint authentication an easy task for Android developers.\r\n\r\n**Note**: this library is powered by [material-dialogs](https://github.com/afollestad/material-dialogs),\r\ndepending on this library will automatically depend on Material Dialogs.\r\n\r\n# Gradle Dependency\r\n\r\n[![](https://jitpack.io/v/com.github.aitorvs.fingerlock/core.svg)](https://jitpack.io/#com.github.aitorvs.fingerlock/core)\r\n[![](https://jitpack.io/v/com.github.aitorvs.fingerlock/dialog.svg)](https://jitpack.io/#com.github.aitorvs.fingerlock/dialog)\r\n[![Build Status](https://travis-ci.org/aitorvs/fingerlock.svg)](https://travis-ci.org/aitorvs/fingerlock)\r\n\r\n##Repository\r\n\r\n```gradle\r\nrepositories {\r\n    maven { url \"https://jitpack.io\" }\r\n}\r\n```\r\n\r\n## Dependencies\r\n\r\n###Core\r\n\r\nThe *core* module contains the core class `FingerLock` to perform full fingerprint authentication.\r\n\r\n```gradle\r\ndependencies {\r\n\r\n    // ... other dependencies here\r\n\r\n    compile 'com.github.aitorvs.fingerlock:core:0.1.0'\r\n}\r\n```\r\n\r\n###Fingerprint Dialog Extension\r\n\r\nThe *dialog* extension module is powered by [material-dialogs](https://github.com/afollestad/material-dialogs)\r\nlibrary and provides an out-of-the-box-ready material authentication dialog based on the design guidelines on fingerprint\r\nauthentication.\r\n\r\n```gradle\r\ndependencies {\r\n\r\n    // ... other dependencies here\r\n\r\n    compile 'com.github.aitorvs.fingerlock:dialog:0.1.0'\r\n}\r\n```\r\n# Core\r\n\r\nThe core module requires Android M and above and also a device supporting fingerprint sensor. If you target\r\ndevices before M or not having fingerprint sensors, use the dialog extension.\r\n\r\n## (Core) FingerLock in 4 steps\r\n\r\n###1. Register your fingerprint listener component (recommended to use `onResume`)\r\n\r\n```java\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n\r\n        // register and use a key to increase security\r\n        FingerLock.register(this, KEY_NAME, this);\r\n    }\r\n```\r\n\r\nThe first parameter is the `Context`. It can be either the caller context but also application context.\r\nThe second parameter shall be a unique non-empty `String` that severs as the key name for the encryption cipher.\r\nThe last parameter is the callback where the fingerprint events will land on.\r\n\r\n###2. Start the fingerprint scanning\r\n\r\nIt is as simple as calling the `start()` method.\r\n\r\n```java\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        // ... Some code here\r\n\r\n\r\n        mButton = (Button) findViewById(R.id.button_authenticate);\r\n        mButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                FingerLock.start();\r\n            }\r\n        });\r\n\r\n        // ... Some more code here\r\n    }\r\n```\r\n\r\n###3. Handle the callbacks\r\n\r\n####Library is ready\r\n\r\n```java\r\n    @Override\r\n    public void onFingerLockReady() {\r\n        // Called right after registration if the device supports fingerprint authentication.\r\n        // This is normally a good place to call FingerLock.start()\r\n    }\r\n```\r\n\r\nThis method is called when the library finishes the registration process successfully.\r\n\r\nThis is normally a good place to call `FingerLock.start()` so start the fingerprint(s) scanning process.\r\n\r\n\r\n####Fingerprint(s) Scanning\r\n\r\n```java\r\n    @Override\r\n    public void onFingerLockScanning(boolean invalidKey) {\r\n        // Called to notify the fingerprint scanning is started successfully as a result of FingerLock.start()\r\n        // The 'invalidKey' parameter will be true when the key is no longer valid. This happens when\r\n        // the user disables the lock screen, resets or adds a new fingerprint after the key was created (i.e. FingerLock.register())\r\n    }\r\n```\r\n\r\nThe callback `onFingerLockScanning(boolean)` is called when the library has started\r\nscanning for fingerprint(s) to authenticate the user. The input parameter `invalidKey` flags when the key provided\r\nduring registration is no longer valid. Either because the user disabled the lock screen, device reset or\r\na new fingerprint was added.\r\nFor security purposes it is recommended to stop scanning fingerpring(s) calling `FingerLock.stop()` and\r\nfallback to any other type of authentication (i.e. password) that authenticates the user and let\r\nthem use fingerprint the next time.\r\n\r\n####Authenticated\r\n\r\n```java\r\n    @Override\r\n    public void onFingerLockAuthenticationSucceeded() {\r\n        // Called when the user fingerprint has been correctly authenticated\r\n    }\r\n```\r\n\r\nThis method is called upon successful fingerprint authentication.\r\n\r\n####Error\r\n\r\nThe callback provides error events that may happen throughout the fingerprint authentication process.\r\n\r\n```java\r\n    @Override\r\n    public void onFingerLockError(@FingerLock.FingerLockErrorState int errorType, Exception e) {\r\n        // Called every time there's an error at any stage during the authentication\r\n\r\n        switch (errorType) {\r\n            case FingerLock.FINGERPRINT_PERMISSION_DENIED:\r\n                // USE_PERMISSION is denied by the user, fallback to password authentication\r\n                break;\r\n            case FingerLock.FINGERPRINT_ERROR_HELP:\r\n                // there's some kind of recoverable error that can be solved. Call e.getMessage()\r\n                // to get help about the error\r\n                break;\r\n            case FingerLock.FINGERPRINT_NOT_RECOGNIZED:\r\n                // The fingerprint was not recognized, try another one\r\n                break;\r\n            case FingerLock.FINGERPRINT_NOT_SUPPORTED:\r\n                // Fingerprint authentication is not supported by the device. Fallback to password\r\n                // authentication\r\n                break;\r\n            case FingerLock.FINGERPRINT_REGISTRATION_NEEDED:\r\n                // There are no fingerprints registered in this device.\r\n                // Go to Settings -> Security -> Fingerprint and register at least one\r\n                break;\r\n            case FingerLock.FINGERPRINT_UNRECOVERABLE_ERROR:\r\n                // Unrecoverable internal error occurred. Unregister and register back\r\n                break;\r\n        }\r\n    }\r\n```\r\n\r\n###4. Unregister when done\r\n\r\nEnsure to unregister the component to avoid memory leaks (recommended to be done in `onPause()`)\r\n\r\n```java\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n\r\n        // unregister to stop receiving fingerprint events\r\n        FingerLock.unregister(this);\r\n    }\r\n```\r\n\r\n# Dialog extension\r\n\r\nThe *dialog* extension module provides an out-of-the-box-ready material design dialog implementation\r\nthat follows the design rules for fingerprint authentication and handles the core library module for\r\nyou.\r\nThe dialog extension **automatically falls back to password authentication** when the device does not \r\nsupport fingerprint authentication.\r\n\r\n\r\n```java\r\npublic class MainActivity extends AppCompatActivity implements FingerprintDialog.Callback {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        // show fingerprint dialog\r\n        FingerprintDialog.show(MainActivity.this, KEY_NAME, REQUEST_CODE);\r\n    }\r\n\r\n    @Override\r\n    public void onFingerprintDialogAuthenticated() {\r\n        // Authentication is successful\r\n    }\r\n\r\n    @Override\r\n    public void onFingerprintDialogVerifyPassword(final FingerprintDialog dialog, final String password) {\r\n        // Password verification has been requested. Use this method to verify the `password` passed\r\n        // as parameter against your backend\r\n\r\n        // Simulate exchange with backend\r\n        new Handler().postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                dialog.notifyPasswordValidation(password.equals(\"aitorvs\"));\r\n            }\r\n        }, 1500);\r\n    }\r\n\r\n    @Override\r\n    public void onFingerprintDialogStageUpdated(FingerprintDialog dialog, FingerprintDialog.Stage stage) {\r\n        Log.d(TAG, \"Dialog stage: \" + stage.name());\r\n    }\r\n\r\n    public enum Stage {\r\n        FINGERPRINT,        // fingerprint authentication allowed\r\n        KEY_INVALIDATED,    // key invalidated, password to be required\r\n        PASSWORD            // password authentication selected by the user\r\n    }\r\n\r\n    @Override\r\n    public void onFingerprintDialogCancelled() {\r\n        Toast.makeText(this, R.string.dialog_cancelled, Toast.LENGTH_SHORT).show();\r\n    }\r\n}\r\n```\r\n\r\n## (Dialog) FingerLock in 3 steps\r\n\r\n### 1. Implement the dialog callbacks\r\n\r\n```java\r\npublic class MainActivity extends AppCompatActivity\r\n        implements FingerprintDialog.Callback {\r\n    //...Looooots of code here\r\n\r\n}\r\n```\r\n\r\n### 2. Show the dialog\r\n\r\n```java\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        // show fingerprint dialog\r\n        FingerprintDialog.show(MainActivity.this, KEY_NAME, REQUEST_CODE);\r\n    }\r\n```\r\n\r\nThe first parameter is the `Context` of the caller or application context.\r\nThe second parameter shall be a unique non-empty `String` that severs as the key name for the encryption cipher.\r\nThe third parameter is a positive integer value that represents a request code.\r\n\r\n### 3. Handle callbacks\r\n\r\n####Authenticated\r\n\r\n```java\r\n    @Override\r\n    public void onFingerprintDialogAuthenticated() {\r\n        // Authentication is successful\r\n    }\r\n```\r\n\r\n####Verify password\r\n\r\n```java\r\n    @Override\r\n    public void onFingerprintDialogVerifyPassword(final FingerprintDialog dialog, final String password) {\r\n        // Password verification has been requested. Use this method to verify the `password` passed\r\n        // as parameter against your backend\r\n\r\n        // Simulate exchange with backend\r\n        new Handler().postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                dialog.notifyPasswordValidation(password.equals(\"aitorvs\"));\r\n            }\r\n        }, 1500);\r\n    }\r\n```\r\n\r\nCalled when password verification is required. Either because triggered automatically when the provided\r\nkey is no longer valid or because the user required so.\r\n\r\nOnce the password is verified, notify the dialog calling `dialog.notifyPasswordValidation(boolean)`.\r\n\r\n####State updated\r\n\r\n```java\r\n    @Override\r\n    public void onFingerprintDialogStageUpdated(FingerprintDialog dialog, FingerprintDialog.Stage stage) {\r\n        Log.d(TAG, \"Dialog stage: \" + stage.name());\r\n    }\r\n```\r\n\r\nMethod called at every internal stage change. Possible states are:\r\n\r\n```java\r\n    public enum Stage {\r\n        FINGERPRINT,        // fingerprint authentication allowed\r\n        KEY_INVALIDATED,    // key invalidated, password to be required\r\n        PASSWORD            // password authentication selected by the user\r\n    }\r\n```\r\n\r\nIt is normally not necessary to act on any of the stages.\r\n\r\n####Authentication cancelled\r\n\r\nCalled when the user cancels the authentication dialog.\r\n\r\n```java\r\n    @Override\r\n    public void onFingerprintDialogCancelled() {\r\n        Toast.makeText(this, R.string.dialog_cancelled, Toast.LENGTH_SHORT).show();\r\n    }\r\n```\r\n\r\n# License\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Aitor Viana Sanchez\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}